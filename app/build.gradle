apply plugin: 'com.android.application'
apply plugin: 'jacoco'


android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.example.srujana.calendar"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        htmlReport false
        xmlReport false
        textReport true
        warningsAsErrors true
        abortOnError true
        explainIssues false
        absolutePaths false
        ignore "InvalidPackage" // square/okio#58
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
        maxHeapSize = '2048m'
        maxParallelForks = 1
        forkEvery = 1
        jacoco {
            includeNoLocationClasses = true
        }
    }

}




dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:27.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    testCompile 'junit:junit:4.12'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.android.support:recyclerview-v7:27.0.0'
    compile 'com.getbase:floatingactionbutton:1.9.1'
    compile 'com.android.support:design:27.1.1'
    compile 'com.anthonycr.grant:permissions:1.0'

}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/coverage")
    }

    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"
    sourceDirectories = files android.sourceSets.main.java.srcDirs
    classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/debug",
            exclude: [ '**/R.class', '**/R$*.class' ])

    doLast {
        println "coveralls report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        println "coverage report generated at file://${reports.html.destination}/index.html"
    }
}
